import type { NextPage } from 'next'
import Script from 'next/script'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { fromWei } from '../utils/common'
import { init, mintToken, checkUserToken, deposit, approveBank, withdraw, login, getUserBalanceInBank } from '../utils/web3client'

const Home: NextPage = () => {
  const [balance, setBalance] = useState(0)
  const [balanceInBank, setBalanceInBank] = useState(0)
  const [isLoading, setIsLoading] = useState(false)
  const [isLogin, setIsLogin] = useState(false)
  const [account, setAccount] = useState('')
  const [inputAmount, setInputAmount] = useState(0)

  useEffect(() => {
    init()
      .then(() => {
        getIsLogin()
          .then((loggedIn) => {
            if (loggedIn) {
              checkToken()
              checkUserBankBalance()
            }
          })
      })
  }, [])

  const getIsLogin = async () => {
    const status = await window.localStorage.getItem('selectedAccount')
    if (!status || status == '') {
      setIsLogin(false)
      setAccount('')
    } else {
      setIsLogin(true)
      setAccount(status)
    }
    return status && status != ''
  }

  const mint = (amount: number) => {
    setIsLoading(true)

    mintToken(`${amount}`)
      .then(tx => {
        checkToken()
      })
      .catch(err => console.log(err))
      .finally(() => setIsLoading(false))
  }

  const checkToken = () => {
    setIsLoading(true)

    checkUserToken()
      .then(tx => {
        const balance = fromWei(tx)
        setBalance(parseInt(balance))
      })
      .catch(err => console.log(err))
      .finally(() => setIsLoading(false))
  }

  const checkUserBankBalance = () => {
    setIsLoading(true)

    getUserBalanceInBank()
      .then((tx) => {
        const balance = fromWei(tx)
        setBalanceInBank(parseInt(balance))
      })
      .catch(err => console.log(err))
      .finally(() => setIsLoading(false))
  }

  const userApproveBank = async (amount: number) => {
    setIsLoading(true)

    await approveBank(`${amount}`)
      .then()
      .catch(err => console.log(err))
      .finally(() => setIsLoading(false))
  }

  const depositToken = async (amount: number) => {
    await userApproveBank(amount)
    setIsLoading(true)
    deposit(`${amount}`)
      .then(tx => {
        checkToken()
        checkUserBankBalance()
      })
      .catch(err => console.log(err))
      .finally(() => setIsLoading(false))
  }

  const withdrawToken = async (amount: number) => {
    setIsLoading(true)
    withdraw(`${amount}`)
      .then(() => {
        checkToken()
        checkUserBankBalance()
      })
      .catch(err => console.log(err))
      .finally(() => setIsLoading(false))
  }

  const onLogin = async () => {
    await login()
  }

  const onBtnClicked = async (fn, amount) => {
    await fn(amount)
    setInputAmount(0)
  }

  const isValidInput = () => {
    return !isNaN(inputAmount) && inputAmount !== 0
  }

  return (
    <div>
      <Head>
        <title>Untrusted Bank</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossOrigin="anonymous"></link>
      </Head>
      <nav className="navbar navbar-light bg-dark">
        <div className="container">
          <a className="navbar-brand text-light">
            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" className="bi bi-cash-stack" viewBox="0 0 16 16">
              <path d="M1 3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1H1zm7 8a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" />
              <path d="M0 5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V5zm3 0a2 2 0 0 1-2 2v4a2 2 0 0 1 2 2h10a2 2 0 0 1 2-2V7a2 2 0 0 1-2-2H3z" />
            </svg>
            <span className="mx-3">Untrusted Bank</span></a>
          <div>
            {
              isLogin &&
              <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" className="bi bi-coin text-white" viewBox="0 0 16 16">
                <path d="M5.5 9.511c.076.954.83 1.697 2.182 1.785V12h.6v-.709c1.4-.098 2.218-.846 2.218-1.932 0-.987-.626-1.496-1.745-1.76l-.473-.112V5.57c.6.068.982.396 1.074.85h1.052c-.076-.919-.864-1.638-2.126-1.716V4h-.6v.719c-1.195.117-2.01.836-2.01 1.853 0 .9.606 1.472 1.613 1.707l.397.098v2.034c-.615-.093-1.022-.43-1.114-.9H5.5zm2.177-2.166c-.59-.137-.91-.416-.91-.836 0-.47.345-.822.915-.925v1.76h-.005zm.692 1.193c.717.166 1.048.435 1.048.91 0 .542-.412.914-1.135.982V8.518l.087.02z" />
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path d="M8 13.5a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11zm0 .5A6 6 0 1 0 8 2a6 6 0 0 0 0 12z" />
              </svg>
            }
            {isLogin && <span className="text-white mx-2" style={{ fontSize: 18 }}>{balance}</span>}
            {!isLogin && <button className="btn btn-success" onClick={() => onLogin()}>Connect with MetaMask</button>}
          </div>
        </div>
      </nav>
      <main>
        {isLoading && <div className="loading">Loading&#8230;</div>}
        <div className="p-5 mb-4 bg-light rounded-3">
          <div className="container py-2">
            <h1 className="display-5 fw-bold">Welcome</h1>
            <p className="col-md-8 fs-4">
              This is the most untrusted bank, nice to meet you <br />
              {
                isLogin &&
                <>
                  <span style={{ fontSize: 16 }} className="text-muted">Current balance in bank</span> <br />
                  <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" style={{ marginTop: -35, marginRight: 10 }} className="bi bi-coin" viewBox="0 0 16 16">
                    <path d="M5.5 9.511c.076.954.83 1.697 2.182 1.785V12h.6v-.709c1.4-.098 2.218-.846 2.218-1.932 0-.987-.626-1.496-1.745-1.76l-.473-.112V5.57c.6.068.982.396 1.074.85h1.052c-.076-.919-.864-1.638-2.126-1.716V4h-.6v.719c-1.195.117-2.01.836-2.01 1.853 0 .9.606 1.472 1.613 1.707l.397.098v2.034c-.615-.093-1.022-.43-1.114-.9H5.5zm2.177-2.166c-.59-.137-.91-.416-.91-.836 0-.47.345-.822.915-.925v1.76h-.005zm.692 1.193c.717.166 1.048.435 1.048.91 0 .542-.412.914-1.135.982V8.518l.087.02z" />
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                    <path d="M8 13.5a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11zm0 .5A6 6 0 1 0 8 2a6 6 0 0 0 0 12z" />
                  </svg>
                  <strong style={{ fontSize: 70 }}>{balanceInBank}</strong>
                </>
              }
            </p>
            {
              !isLogin &&
              <span
                style={{ fontSize: 16 }}
                className="text-muted"
              >
                Please connect to the wallet with Metamask
              </span>
            }
          </div>
        </div>
        <div className="container my-4">
          {
            isLogin && (
              <div className="row">
                <div className="col-12">
                  <div className="mb-3">
                    <input type="number" value={isNaN(inputAmount) || inputAmount == 0 ? '' : inputAmount} className="form-control form-control-lg" placeholder="Please input amount of Token" onChange={(e) => setInputAmount(parseInt(e.target.value))} />
                  </div>
                </div>
                <div className="col-12 col-md-4 my-2 px-2">
                  <button
                    className="btn btn-secondary w-100 btn-lg"
                    disabled={isLoading || !isValidInput()} onClick={() => onBtnClicked(mint, inputAmount)}
                  >
                    <strong>Mint Token</strong>
                  </button>
                </div>
                <div className="col-12 col-md-4 my-2 px-2">
                  <button
                    className="btn btn-secondary w-100 btn-lg"
                    disabled={isLoading || !isValidInput()} onClick={() => onBtnClicked(depositToken, inputAmount)}
                  >
                    <strong>Deposit</strong>
                  </button>
                </div>
                <div className="col-12 col-md-4 my-2 px-2">
                  <button
                    className="btn btn-secondary w-100 btn-lg"
                    disabled={isLoading || !isValidInput()} onClick={() => onBtnClicked(withdrawToken, inputAmount)}
                  >
                    <strong>Withdraw</strong>
                  </button>
                </div>
              </div>
            )
          }
        </div>
      </main>
      <Script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossOrigin="anonymous" />
    </div>
  )
}

export default Home
